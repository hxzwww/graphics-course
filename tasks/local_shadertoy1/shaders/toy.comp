#version 430

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba8) uniform image2D resultImage;

const vec2 iResolution = vec2(1280, 720);
const float iTime = 2.0;

#define MAX_STEPS 1000
#define MAX_DIST 40.0
#define SURFACE_DIST 0.001
#define PLANE_SHIFT 1.3

vec3 lightPos = vec3(2.0, 5.0, 5.0);
vec3 ro = vec3(0.0, 0.0, 5.0);

float torusSDF(vec3 p, vec2 t) {
    vec2 q = vec2(length(p.xy) - t.x, p.z);
    return length(q) - t.y;
}

float planeSDF(vec3 p) {
    return p.y + PLANE_SHIFT;
}

float sceneSDF(vec3 p, float time) {
    float angle = time;
    float c = cos(angle);
    float s = sin(angle);
        
    vec3 rotatedP = vec3(p.x + s, p.y * c - p.z * s, p.y * s + p.z * c);
    
    float dTorus = torusSDF(rotatedP, vec2(0.7, 0.2));
    float dPlane = planeSDF(p);
    
    return min(dTorus, dPlane);
}

vec3 getNormal(vec3 p, float time) {
    float epsilon = 0.001;
    vec2 e = vec2(epsilon, 0);
    
    return normalize(vec3(
        sceneSDF(p + e.xyy, time) - sceneSDF(p - e.xyy, time),
        sceneSDF(p + e.yxy, time) - sceneSDF(p - e.yxy, time),
        sceneSDF(p + e.yyx, time) - sceneSDF(p - e.yyx, time)
    ));
}

float shadow(vec3 ro, vec3 rd, float time) {
    float res = 1.0;
    float t = 0.1;

    for (int i = 0; i < MAX_STEPS; i++) {
        float h = sceneSDF(ro + rd * t, time);

        if (h < SURFACE_DIST) {
            return 0.0;
        }

        res = min(res, 10.0 * h / t);
        t += h;

        if (t > MAX_DIST) {
            break;
        }
    }

    return res;
}

vec3 getLight(vec3 p, vec3 normal, vec3 lightDir, vec3 viewDir, float time) {
    float diff = max(dot(normal, lightDir), 0.0);
    float shadowFactor = shadow(p + normal * SURFACE_DIST * 2.0, lightDir, time);
    diff *= shadowFactor;
    return vec3(-0.1) + vec3(1.0, 0.3, 0.8) * diff;
}

float rayMarch(vec3 rd, float time) {
    float dist = 0.0;

    for (int i = 0; i < MAX_STEPS; i++) {
        vec3 p = ro + rd * dist;
        float d = sceneSDF(p, time);

        if (d < SURFACE_DIST) {
            return dist;
        }

        dist += d;

        if (dist > MAX_DIST) {
            break;
        }
    }

    return MAX_DIST;
}

void main() {
    ivec2 iuv = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (iuv - 0.5 * iResolution.xy) / iResolution.y;  

    vec3 rd = normalize(vec3(uv, -1.5));
    float dist = rayMarch(rd, iTime);

    vec3 color = vec3(0.0);
    if (dist < MAX_DIST) {
        vec3 p = ro + rd * dist;
        vec3 normal = getNormal(p, iTime);
        vec3 lightDir = normalize(lightPos - p);
        vec3 viewDir = normalize(ro - p);
        color = getLight(p, normal, lightDir, viewDir, iTime);
    }
    color = pow(color, vec3(1.0 / 2.2));

    imageStore(resultImage, iuv, vec4(color, 0.0));

}
